package com.gardenshop.personal.service.scheduler;

import com.gardenshop.personal.model.order.Order;
import com.gardenshop.personal.model.order.OrderStatus;
import com.gardenshop.personal.repository.OrderRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.time.Duration;
import java.time.LocalDateTime;
import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class OrderStatusScheduler {

    private final OrderRepository orderRepository;

    @Scheduled(fixedRate = 30_000)
    public void updateOrderStatuses() {
        List<Order> orders = orderRepository.findAll();

        for (Order order : orders) {
            LocalDateTime orderDate = order.getOrderDate();
            Duration duration = Duration.between(orderDate, LocalDateTime.now());

            switch (order.getStatus()) {
                case AWAITING_PAYMENT -> {
                    if (duration.toMinutes() >= 15) {
                        order.setStatus(OrderStatus.CANCELLED);
                        log.info("‚ùå –ó–∞–∫–∞–∑ #{} –æ—Ç–º–µ–Ω—ë–Ω (–æ–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞ 15 –º–∏–Ω—É—Ç)", order.getId());
                    }
                }

                case PAID -> {
                    if (duration.toHours() >= 1) {
                        order.setStatus(OrderStatus.SHIPPED);
                        order.setDeliveryCompany("DPD"); // –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–∫–æ–π
                        order.setTrackingLink("https://tracking.example.com/" + order.getId());
                        log.info("üì§ –ó–∞–∫–∞–∑ #{} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –¥–æ—Å—Ç–∞–≤–∫—É (SHIPPED)", order.getId());
                    }
                }

                case SHIPPED -> {
                    if (duration.toHours() >= 2) {
                        order.setStatus(OrderStatus.IN_DELIVERY);
                        log.info("üöö –ó–∞–∫–∞–∑ #{} –ø–µ—Ä–µ–¥–∞–Ω –≤ —Ä—É–∫–∏ –∫—É—Ä—å–µ—Ä–∞ (IN_DELIVERY)", order.getId());
                    }
                }

                case IN_DELIVERY -> {
                    if (duration.toHours() >= 4) {
                        order.setStatus(OrderStatus.DELIVERED);
                        log.info("‚úÖ –ó–∞–∫–∞–∑ #{} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω (DELIVERED)", order.getId());
                    }
                }

                default -> {
                    // –°—Ç–∞—Ç—É—Å—ã CREATED, CANCELLED, DELIVERED ‚Äî –Ω–µ –º–µ–Ω—è–µ–º
                }
            }
        }

        orderRepository.saveAll(orders);
    }
}
